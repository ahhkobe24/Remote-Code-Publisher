#include "perFile.h"
/////////////////////////////////////////////////////////////////////
//  perFile.cpp - implement perFile.h                              //
//  ver 1.0                                                        //
//  Language:	Visual C++ 2015                                    //
//  Author:		Xia Hua                                      //
/////////////////////////////////////////////////////////////////////
/*
* Package Operations:
* -------------------
* This package is designed to process each .cpp file or .h file.
* Add CSS part and JavaScript part.
*
* Public Interface:
* -----------------
* None
*
* Maintenance History:
* --------------------
* ver 1.0: Apr 2 2017
* - first released
*/

//----<add corresponding part>----------
perFile::perFile(std::string in, std::string css, std::string js, std::string root)
{

	filePath = in;
	std::fstream file(in);
	std::string line;
	fileHTMLStr.append("<!----------------------------------------------------------\n");
	fileHTMLStr.append(" ").append(in).append(" . Generated by CodePublisher. \n");
	fileHTMLStr.append(" Publised on Apr.5.2017 \n");
	fileHTMLStr.append(" Generated by Xia Hua. \n");
	fileHTMLStr.append("------------------------------------------------------------>\n");
	fileHTMLStr.append("<!DOCTYPE html>\n");
	fileHTMLStr.append("<html>\n");
	fileHTMLStr.append("<head>\n");
	fileHTMLStr.append(CSSPart(css));
	fileHTMLStr.append(JSPart(js));
	fileHTMLStr.append("</head>\n");
	fileHTMLStr.append("<body onload=\"init()\">\n");
	fileHTMLStr.append("<h3>").append(in).append("</h3>\n");
	fileHTMLStr.append("<pre>\n");
	int flag = 0, i = 0;
	while (std::getline(file, line)) {
		flag = 0;
		line.append("\n");
		fileStr.append(line);
		int f, l;
		if (line.find("#include \"") != line.npos || line.find("#include\"") != line.npos) {
			f = line.find_first_of('\"');
			l = line.find_last_of('\"');
			if (l != line.npos && l != f)
				headerPaths.push_back(line.substr(f + 1, l - f - 1));
		}
		flag = eachLine(line, i++, flag);
		fileHTMLStr.append(line);
	}
	fileHTMLStr.append("</pre>\n");
	fileHTMLStr.append("</body>\n");
	fileHTMLStr.append("</html>\n");
	//insertDep_Root(dep_Root(headerPaths, root));
}

//----<add css part>----------
std::string perFile::CSSPart(std::string cssPath)
{
	std::string cssStr("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
	cssStr.append(cssPath);
	cssStr.append("\">\n");
	return cssStr;
}

//----<add javascript part>----------
std::string perFile::JSPart(std::string jsPath)
{
	std::string jsStr("<script src=\"");
	jsStr.append(jsPath);
	jsStr.append("\"></script>\n");
	return jsStr;
}

//----<add dependence and back part>----------
//std::string perFile::dep_Root(std::vector<std::string> depPaths, std::string root)
//{
//	std::string back("<a href=\"");
//	back.append(root).append("\">Back to Root</a>\n");
//	std::string depStr("<hr/>\n");
//	depStr.append("<div class=\"indent\">\n");
//	for (std::string dep : depPaths) {
//		depStr.append("<a href=\"");
//		depStr.append(dep).append(".html");
//		depStr.append("\">");
//		depStr.append(dep);
//		depStr.append("</a></br>\n");
//	}
//	depStr.append("</div>\n");
//	depStr.append("<hr/>\n");
//	back.append(depStr);
//	return back;
//}

//----<insert dependence and back part>----------
std::string perFile::insertDep_Root(std::string dep_root)
{
	std::string body("</h3>\n");
	size_t start = fileHTMLStr.find(body);
	start = start + body.length();
	fileHTMLStr.insert(start, dep_root);
	return fileHTMLStr;
}

//----<process each code line>----------
int perFile::eachLine(std::string& line, int no, int flag)
{
	for (size_t i = 0; i < line.length(); i++) {
		if (line[i] == '<' || line[i] == '>') {
			if (line[i] == '<')line.insert(i + 1, "lt;");
			else line.insert(i + 1, "gt;");
			line[i] = '&';
			i = i + 3;
			continue;
		}
		if (line[i] == '/' && line[i + 1] == '/') flag = 4;
		switch (flag)
		{
		case 1: if (line[i] == '*' && line[i + 1] == '/') i++; flag = 0; continue;
		case 2: if (line[i] == '"' && line[i - 1] != '\\') flag = 0; continue;
		case 3: if (line[i] == '\'' && line[i - 1] != '\\') flag = 0; continue;
		default: break;
		}
		if (flag != 0) continue;
		if (line[i] == '/'&& line[i + 1] == '*') { flag = 1; i++; continue; }
		if (line[i] == '"') { flag = 2; continue; }
		if (line[i] == '\'') { flag = 3; continue; }
		if (line[i] == '{') {
			line.insert(0, "<div name=\"content\">");
			i = i + 20;
			continue;
		}
		if (line[i] == '}') {
			line.insert(i + 1, "</div>");
			i = i + 6;
		}
	}
	return flag;
}

//----<Test Stub>----------
/*
* Demonstrate how perFile class works
*/
#ifdef TEST_PERFILE
int main()
{
	std::string css("./myStyle.css");
	std::string js("./myScript.js");
	perFile a("./perFile.cpp", css, js, "./perFile.cpp.html");
	std::ofstream out("./perFile.cpp.html");
	if (out.is_open())
	{
		out << a.getFileHTMLStr();
		out.close();
	}
	perFile b("./perFile.h", css, js, "./perFile.h.html");
	std::ofstream out2("./perFile.h.html");
	if (out2.is_open())
	{
		out2 << b.getFileHTMLStr();
		out2.close();
	}
	system("pause");

}
#endif // TEST_PERFILE